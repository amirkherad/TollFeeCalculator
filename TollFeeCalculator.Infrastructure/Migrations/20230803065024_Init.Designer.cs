// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TollFeeCalculator.Infrastructure.DataAccess;

#nullable disable

namespace TollFeeCalculator.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230803065024_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TollFeeCalculator.Domain.Entities.Cities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedOn")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("Name");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("ProvinceId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("Name");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("ProvinceId", "Name")
                        .IsUnique();

                    b.ToTable("Cities", "dbo");
                });

            modelBuilder.Entity("TollFeeCalculator.Domain.Entities.Provinces.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedOn")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("Name");

                    b.ToTable("Provinces", "dbo");
                });

            modelBuilder.Entity("TollFeeCalculator.Domain.Entities.SingleChargeRules.SingleChargeRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedOn")
                        .HasDefaultValueSql("getdate()");

                    b.Property<TimeSpan>("PeriodOfTime")
                        .HasColumnType("time")
                        .HasColumnName("PeriodOfTime");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("SingleChargeRules", "dbo");
                });

            modelBuilder.Entity("TollFeeCalculator.Domain.Entities.TimeAmounts.TimeAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedOn")
                        .HasDefaultValueSql("getdate()");

                    b.Property<TimeSpan>("From")
                        .HasColumnType("time")
                        .HasColumnName("From");

                    b.Property<TimeSpan>("To")
                        .HasColumnType("time")
                        .HasColumnName("To");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("From");

                    b.HasIndex("To");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("TimeAmounts", "dbo");
                });

            modelBuilder.Entity("TollFeeCalculator.Domain.Entities.VehicleTypes.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedOn")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("VehicleTypes", "dbo");
                });

            modelBuilder.Entity("TollFeeCalculator.Domain.Entities.Cities.City", b =>
                {
                    b.HasOne("TollFeeCalculator.Domain.Entities.Provinces.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("TollFeeCalculator.Domain.Entities.SingleChargeRules.SingleChargeRule", b =>
                {
                    b.HasOne("TollFeeCalculator.Domain.Entities.Cities.City", "City")
                        .WithMany("SingleChargeRules")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TollFeeCalculator.Domain.Entities.VehicleTypes.VehicleType", "VehicleType")
                        .WithMany("SingleChargeRules")
                        .HasForeignKey("VehicleTypeId");

                    b.Navigation("City");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("TollFeeCalculator.Domain.Entities.TimeAmounts.TimeAmount", b =>
                {
                    b.HasOne("TollFeeCalculator.Domain.Entities.Cities.City", "City")
                        .WithMany("TimeAmounts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TollFeeCalculator.Domain.Entities.VehicleTypes.VehicleType", "VehicleType")
                        .WithMany("TimeAmounts")
                        .HasForeignKey("VehicleTypeId");

                    b.Navigation("City");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("TollFeeCalculator.Domain.Entities.Cities.City", b =>
                {
                    b.Navigation("SingleChargeRules");

                    b.Navigation("TimeAmounts");
                });

            modelBuilder.Entity("TollFeeCalculator.Domain.Entities.Provinces.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("TollFeeCalculator.Domain.Entities.VehicleTypes.VehicleType", b =>
                {
                    b.Navigation("SingleChargeRules");

                    b.Navigation("TimeAmounts");
                });
#pragma warning restore 612, 618
        }
    }
}
